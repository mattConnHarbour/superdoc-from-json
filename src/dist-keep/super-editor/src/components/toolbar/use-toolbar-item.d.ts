export function useToolbarItem(options: any): {
    unref: () => {};
    activate: (attrs: any) => void;
    deactivate: () => void;
    setDisabled: (state: any) => void;
    resetDisabled: () => void;
    onActivate: any;
    onDeactivate: any;
    id: import("vue").Ref<string, string>;
    name: import("vue").Ref<any, any>;
    type: any;
    command: any;
    noArgumentCommand: any;
    icon: import("vue").Ref<any, any>;
    tooltip: import("vue").Ref<any, any>;
    group: import("vue").Ref<any, any>;
    attributes: import("vue").Ref<any, any>;
    disabled: import("vue").Ref<any, any>;
    active: import("vue").Ref<boolean, boolean>;
    expand: import("vue").Ref<boolean, boolean>;
    nestedOptions: import("vue").Ref<any[], any[]>;
    style: import("vue").Ref<any, any>;
    isNarrow: import("vue").Ref<any, any>;
    isWide: import("vue").Ref<any, any>;
    minWidth: import("vue").Ref<any, any>;
    argument: import("vue").Ref<any, any>;
    parentItem: import("vue").Ref<any, any>;
    iconColor: import("vue").Ref<any, any>;
    hasCaret: import("vue").Ref<any, any>;
    dropdownStyles: import("vue").Ref<any, any>;
    tooltipVisible: import("vue").Ref<any, any>;
    tooltipTimeout: import("vue").Ref<any, any>;
    defaultLabel: import("vue").Ref<any, any>;
    label: import("vue").Ref<any, any>;
    hideLabel: import("vue").Ref<any, any>;
    inlineTextInputVisible: import("vue").Ref<any, any>;
    hasInlineTextInput: import("vue").Ref<any, any>;
    markName: import("vue").Ref<any, any>;
    labelAttr: import("vue").Ref<any, any>;
    childItem: import("vue").Ref<any, any>;
    allowWithoutEditor: import("vue").Ref<any, any>;
    dropdownValueKey: import("vue").Ref<any, any>;
    selectedValue: import("vue").Ref<any, any>;
    inputRef: import("vue").Ref<any, any>;
};
